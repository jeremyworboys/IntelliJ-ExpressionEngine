{
  parserClass="com.jeremyworboys.expressionengine.parser.ExpressionEngineParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  extends(".*expr")=expr

  psiClassPrefix="ExpressionEngine"
  psiImplClassSuffix="Impl"
  psiPackage="com.jeremyworboys.expressionengine.psi"
  psiImplPackage="com.jeremyworboys.expressionengine.psi.impl"

  elementTypeHolderClass="com.jeremyworboys.expressionengine.psi.ExpressionEngineTypes"
  elementTypeClass="com.jeremyworboys.expressionengine.psi.ExpressionEngineElementType"
  tokenTypeClass="com.jeremyworboys.expressionengine.psi.ExpressionEngineTokenType"
}

expressionengineFile ::= statement*

//private statement ::= (tag|conditional|HTML|COMMENT|CRLF)
private statement ::= comment | tag | conditional | T_HTML | T_CRLF

// Comments
comment ::= T_COMMENT

// Conditionals
conditional ::= conditional_if
              | conditional_elseif
              | conditional_else
              | conditional_endif
//conditional ::= conditional_if statement* (conditional_elseif statement*)* (conditional_else statement*)? conditional_endif

private conditional_if     ::= T_LD T_IF expr T_RD
private conditional_elseif ::= T_LD T_ELSEIF expr T_RD
private conditional_else   ::= T_LD T_ELSE T_RD
private conditional_endif  ::= T_LD T_ENDIF T_RD

// Conditional expressions
expr ::= group_bool | group_cmp | group_add | group_mul | group_unary | op_pow_expr | op_concat_expr | group_primary

private group_bool    ::= op_and_expr | op_xor_expr | op_or_expr
private group_cmp     ::= op_eq_expr | op_neq_expr | op_lt_expr | op_lte_expr | op_gt_expr | op_gte_expr | op_starts_expr | op_contains_expr | op_ends_expr | op_match_expr
private group_mul     ::= op_mul_expr | op_div_expr | op_mod_expr
private group_add     ::= op_add_expr | op_sub_expr
private group_unary   ::= unary_not_expr | unary_plus_expr | unary_minus_expr
private group_primary ::= literal_expr | paren_expr
private group_vars    ::= T_GLOBAL_VAR | T_GLOBAL_CONST | T_EMBED_VAR | T_LAYOUT_VAR | T_VARIABLE

op_eq_expr       ::= expr T_OP_EQ expr
op_neq_expr      ::= expr T_OP_NEQ expr
op_lt_expr       ::= expr T_OP_LT expr
op_lte_expr      ::= expr T_OP_LTE expr
op_gt_expr       ::= expr T_OP_GT expr
op_gte_expr      ::= expr T_OP_GTE expr
op_starts_expr   ::= expr T_OP_STARTS expr
op_contains_expr ::= expr T_OP_CONTAINS expr
op_ends_expr     ::= expr T_OP_ENDS expr
op_match_expr    ::= expr T_OP_MATCH expr
op_and_expr      ::= expr T_OP_AND expr
op_xor_expr      ::= expr T_OP_XOR expr
op_or_expr       ::= expr T_OP_OR expr
op_add_expr      ::= expr T_OP_ADD expr
op_sub_expr      ::= expr T_OP_SUB expr
op_mul_expr      ::= expr T_OP_MUL expr
op_div_expr      ::= expr T_OP_DIV expr
op_pow_expr      ::= expr T_OP_POW expr
op_mod_expr      ::= expr T_OP_MOD expr
op_concat_expr   ::= expr T_OP_CONCAT expr
unary_not_expr   ::= T_OP_NOT expr
unary_plus_expr  ::= T_OP_ADD expr
unary_minus_expr ::= T_OP_SUB expr
paren_expr       ::= T_LP expr T_RP
literal_expr     ::= T_BOOL | T_NUMBER | group_vars | string

// Tags
tag ::= tag_simple | tag_compound | tag_with_param | tag_module

private tag_simple ::= T_LD group_vars T_RD

private tag_compound ::= T_LD group_vars tag_param* T_RD
                       | T_LD T_SLASH group_vars T_RD

// TODO: Specify the exact variables that have a primary param
private tag_with_param ::= T_LD T_VARIABLE T_EQUALS tag_param_value tag_param* T_RD

private tag_module ::= T_LD T_TAG_NAME tag_param* T_RD
                     | T_LD T_SLASH T_TAG_NAME T_RD

private tag_param ::= T_COMMENT | (T_TAG_PARAM T_EQUALS tag_param_value)
private tag_param_value ::= T_NUMBER | T_PATH | group_vars | string

//private tag_local_var  ::= T_LD T_VARIABLE T_RD

//tag ::= LD tag_name tag_attribute* RD
//      | LD tag_param tag_attribute* RD

//tag_name ::= (TAG_BUILTIN|TAG_BUILTIN_CLOSE|TAG_ADDON|TAG_ADDON_CLOSE|TAG_CONSTANT|TAG_DEPRECATED|TAG_DEPRECATED_CLOSE|TAG_GLOBAL_VAR|TAG_LOCAL_VAR|IDENTIFIER)
//tag_param ::= TAG_GLOBAL_VAR_PARAM EQUAL attribute_value
//tag_attribute ::= (CRLF|attribute|conditional)

//conditional ::= CRLF? LD (conditional_open|ELSE|END_IF) RD CRLF?
//conditional_open ::= (IF|ELSE_IF) conditional_expression
//conditional_expression ::= CRLF? IDENTIFIER CRLF?

//attribute ::= CRLF? IDENTIFIER EQUAL attribute_value CRLF?
//attribute_value ::= (NUMBER|IDENTIFIER|attribute_string)
//attribute_string ::= (STRING_START (tag|COMMENT|STRING+) STRING_END) | (STRING_START STRING_END)

// Strings
private string ::= (T_STRING_START (T_COMMENT | T_STRING+) T_STRING_END)
                 | (T_STRING_START T_STRING_END)
