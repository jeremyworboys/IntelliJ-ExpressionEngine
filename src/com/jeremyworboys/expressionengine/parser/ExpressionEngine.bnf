{
  parserClass="com.jeremyworboys.expressionengine.parser.ExpressionEngineParser"
  parserUtilClass="com.jeremyworboys.expressionengine.parser.ExpressionEngineParserUtil"

  psiPackage="com.jeremyworboys.expressionengine.psi"
  psiImplPackage="com.jeremyworboys.expressionengine.psi.impl"
  psiClassPrefix="ExpressionEngine"
  psiImplClassSuffix="Impl"

  elementTypeHolderClass="com.jeremyworboys.expressionengine.psi.ExpressionEngineTypes"
  elementTypeClass="com.jeremyworboys.expressionengine.psi.ExpressionEngineElementType"
  tokenTypeClass="com.jeremyworboys.expressionengine.psi.ExpressionEngineTokenType"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  extends(".*expr")=expr
}

expressionEngineFile ::= statement*
private statement ::= module | conditional | special_tag | variable_tag | comment | T_CONTENT

// Literals
path_literal ::= T_PATH_LITERAL
number_literal ::= T_NUMBER_LITERAL
string_literal ::= T_STRING_START T_STRING_CONTENT* T_STRING_END
boolean_literal ::= T_TRUE | T_FALSE

// Comments
comment ::= T_COMMENT

// Tag params
private tag_params ::= (tag_param | variable_tag_param | conditional_tag_param | comment)*
tag_param ::= T_PARAM_NAME T_EQUAL tag_param_value {
  pin=1
  mixin="com.jeremyworboys.expressionengine.psi.impl.ExpressionEngineTagParamMixin"
  implements="com.jeremyworboys.expressionengine.psi.ExpressionEngineTagParamElement"
}
tag_param_value ::= path_literal | number_literal | string_literal | boolean_literal {
  mixin="com.jeremyworboys.expressionengine.psi.impl.ExpressionEngineTagParamValueMixin"
  implements="com.jeremyworboys.expressionengine.psi.ExpressionEngineTagParamValueElement"
}
variable_tag_param ::= variable
conditional_tag_param ::= conditional_if tag_params (conditional_elseif tag_params)* (conditional_else tag_params)? conditional_endif {pin=1}

// Special tags
private special_tag ::= path_tag | route_tag | embed_tag | layout_tag | redirect_tag | switch_tag | encode_tag | stylesheet_tag | preload_replace_tag
path_tag ::= T_LD T_PATH T_EQUAL tag_param_value T_RD {pin=2}
route_tag ::= T_LD T_ROUTE T_EQUAL tag_param_value tag_params T_RD {pin=2}
embed_tag ::= T_LD T_EMBED T_EQUAL tag_param_value tag_params T_RD {pin=2}
layout_tag ::= T_LD T_LAYOUT T_EQUAL tag_param_value tag_params T_RD {pin=2}
redirect_tag ::= T_LD T_REDIRECT T_EQUAL tag_param_value tag_params T_RD {pin=2}
switch_tag ::= T_LD T_SWITCH T_EQUAL tag_param_value T_RD {pin=2}
encode_tag ::= T_LD T_ENCODE T_EQUAL tag_param_value tag_params T_RD {pin=2}
stylesheet_tag ::= T_LD T_STYLESHEET T_EQUAL tag_param_value T_RD {pin=2}
preload_replace_tag ::= T_LD T_PRELOAD_REPLACE T_COLON T_PARAM_NAME T_EQUAL tag_param_value T_RD {pin=2}

// Variables
private variable_tag ::= parametric_variable | variable
variable ::= <<isPairVariable true>> variable_pair | <<isPairVariable false>> variable_single
private variable_pair   ::= variable_open_tag statement* variable_close_tag {pin=1}
private variable_single ::= variable_open_tag
variable_open_tag  ::= T_LD T_VARIABLE_NAME tag_params T_RD {pin=2}
variable_close_tag ::= T_LD T_SLASH T_VARIABLE_NAME T_RD {pin=3}
parametric_variable ::= T_LD T_VARIABLE_NAME T_EQUAL tag_param_value T_RD {pin=3}

// Modules
module ::= <<isPairModule true>> module_pair | <<isPairModule false>> module_single
private module_pair   ::= module_open_tag statement* module_close_tag {pin=1}
private module_single ::= module_open_tag
module_open_tag  ::= T_LD T_MODULE_NAME tag_params T_RD {
  pin=2
  mixin="com.jeremyworboys.expressionengine.psi.impl.ExpressionEngineModuleOpenTagMixin"
  implements="com.jeremyworboys.expressionengine.psi.ExpressionEngineModuleOpenTagElement"
}
module_close_tag ::= T_LD T_SLASH T_MODULE_NAME T_RD {pin=3}

// Conditionals
conditional ::= conditional_if statement* (conditional_elseif statement*)* (conditional_else statement*)? conditional_endif {pin=1}
conditional_if     ::= T_LD T_IF expr T_RD {pin=2}
conditional_elseif ::= T_LD T_ELSEIF expr T_RD {pin=2}
conditional_else   ::= T_LD T_ELSE T_RD {pin=2}
conditional_endif  ::= T_LD T_SLASH T_IF T_RD {pin=3}

// Conditional expressions
expr ::= group_bool | group_cmp | group_add | group_mul | group_unary | op_pow_expr | op_concat_expr | group_primary

private group_bool    ::= op_and_expr | op_xor_expr | op_or_expr
private group_cmp     ::= op_eq_expr | op_neq_expr | op_lt_expr | op_lte_expr | op_gt_expr | op_gte_expr | op_starts_expr | op_contains_expr | op_ends_expr | op_match_expr
private group_mul     ::= op_mul_expr | op_div_expr | op_mod_expr
private group_add     ::= op_add_expr | op_sub_expr
private group_unary   ::= unary_not_expr | unary_plus_expr | unary_minus_expr
private group_primary ::= literal_expr | paren_expr

op_eq_expr       ::= expr T_OP_EQ expr
op_neq_expr      ::= expr T_OP_NEQ expr
op_lt_expr       ::= expr T_OP_LT expr
op_lte_expr      ::= expr T_OP_LTE expr
op_gt_expr       ::= expr T_OP_GT expr
op_gte_expr      ::= expr T_OP_GTE expr
op_starts_expr   ::= expr T_OP_STARTS expr
op_contains_expr ::= expr T_OP_CONTAINS expr
op_ends_expr     ::= expr T_OP_ENDS expr
op_match_expr    ::= expr T_OP_MATCH expr
op_and_expr      ::= expr T_OP_AND expr
op_xor_expr      ::= expr T_OP_XOR expr
op_or_expr       ::= expr T_OP_OR expr
op_add_expr      ::= expr T_OP_ADD expr
op_sub_expr      ::= expr T_OP_SUB expr
op_mul_expr      ::= expr T_OP_MUL expr
op_div_expr      ::= expr T_OP_DIV expr
op_pow_expr      ::= expr T_OP_POW expr
op_mod_expr      ::= expr T_OP_MOD expr
op_concat_expr   ::= expr T_OP_CONCAT expr
unary_not_expr   ::= T_OP_NOT expr
unary_plus_expr  ::= T_OP_ADD expr
unary_minus_expr ::= T_OP_SUB expr
paren_expr       ::= T_LP expr T_RP
literal_expr     ::= number_literal | string_literal | boolean_literal | T_VARIABLE_NAME
